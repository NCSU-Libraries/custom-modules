<?php
/**
* Library Hours Module
* Erik Olson - 7/11/13
*/


/**
 * Implements hook_views_pre_build
 */
function hours_views_pre_build(&$view) {
    $filters = $view->display_handler->get_option('filters');
    if (isset($filters['field_hours_value']) && isset($filters['field_hours_value']['default_date'])) {
        if (isset($_GET['date'])) {
            $my_date = $_GET['date'];
        } else{
            $my_date = date('Y-m-j');
        }

        $filters['field_hours_value']['default_date'] = $my_date;
        if(isset($_GET['end_date'])){
            $filters['field_hours_value']['default_to_date'] = $_GET['end_date'];
        } else{
            $filters['field_hours_value']['default_to_date'] = $my_date;
        }
        //       $filters['field_dates_value2']['default_date'] = 'first day of ' . $my_date;
        //       $filters['field_dates_value2']['default_to_date'] = 'last day of ' . $my_date;
        $view->display_handler->override_option('filters', $filters);
    }
    // print_r($filters);
}

function hours_get_cal_data($day){

    $cal_ary = array();

    if($day['exam_hours'] == 1){
        $color = 'exam-hours';
    } else if($day['exception'] == 1){
        $color = 'exception';
    } else{
        $color = $day['semester'];
    }

    $cal_ary['color'] = $color;

    $cal_ary['monthName'] = $monthName;
    $cal_ary['open_display'] = ($day['is_open'] == 1) ? 'open' : 'closed';
    $cal_ary['display'] = $day['display'];
    return $cal_ary;
}

function hours_get_current_month_hours(){
    if(isset($_GET['date'])){
        $d = preg_split('/-/si',$_GET['date']);
        $year = $d[0];
        $month = $d[1];
    } else{
        $month = date('m');
        $year = date('Y');
    }

    $days_in_month = cal_days_in_month(CAL_GREGORIAN, $month, $year);

    $json_str = file_get_contents($GLOBALS['base_url'].'/rest_hours/master-hours-feed.json?library_short_name='.arg(1).'&service_short_name='.arg(2).'&date='.$year.'-'.$month.'-1&end_date='.$year.'-'.$month.'-'.$days_in_month);
    $json_data = json_decode($json_str, true);

    return $json_data;
}


function hours_get_exception($exception, $month_hours){
    $exam_dates_ary = array();

    foreach($month_hours as $day){
        if($day[$exception] == 1){
            $new_date_range = $day['day_end'];
            if($new_date_range != $old_date_range && $new_date_range != ''){
                if($day['day_start'] != $day['day_end']){
                    $range = date('M j',$day['day_start']).'-'.date('j',$day['day_end']);
                } else{
                    $range = date('M j',$day['day_start']);
                }
                array_push($exam_dates_ary,array('date_range'=>$range, 'display'=>$day['open_hours']));
            }
            $old_date_range = $new_date_range;
        }
    }

    return $exam_dates_ary;
}



/**
* @file
* Overrides 'Page Not Found' message for custom non-drupal URL's.
*/
/**
* Implements hook_menu().
*/
function hours_menu() {
    $items = array();

    $items['hours/%/%'] = array(
        'title' => 'Libraries & Hours',
        'description' => 'Library hours description',
        'page callback' => 'diversion_callback',
        'access arguments' => array('access content'),
        );
    return $items;
}

function diversion_callback(){
    $url = ucfirst(str_replace('-', ' ', arg(2)));
    drupal_set_title($url.' Hours');
    return '';
}



function hours_get_first_date(){
    if(isset($_GET['date'])){
        $d = preg_split('/-/si',$_GET['date']);
        $year = $d[0];
        $dateObj   = DateTime::createFromFormat('!m', $d[1]);
        $month = $dateObj->format('F');
        $month_num = $d[1];
    } else{
        $year = date('Y');
        $month = date('F');
        $month_num = date('n');
    }
    // total days in month
    $num_days_in_month = cal_days_in_month(CAL_GREGORIAN, $month_num, $year);

    $time = strtotime($month.' '.$year. 'Monday');
    return array(
        'year'=>date('Y', $time),
        'month'=>date("m", $time),
        'day'=>date("j", $time),
        'month_num'=>$month_num,
        'num_days_in_month'=>$num_days_in_month
    );
}

function hours_get_reg_schedule($lib,$service){
    if(!$lib){
        $lib = arg(1);
    }

    if(!$service){
        $service = arg(2);
    }

    $first_date = hours_get_first_date();
    $end_date = date('Y-m-j',strtotime($first_date['year'].'-'.$first_date['month'].'-'.$first_date['num_days_in_month']. '+ 6 days'));

    $json_data = file_get_contents($GLOBALS['base_url'].'/rest_hours/master-hours-feed.json?library_short_name='.$lib.'&service_short_name='.$service.'&date='.$first_date['year'].'-'.$first_date['month'].'-'.$first_date['day'].'&exception=0&exam_hours=0&end_date='.$end_date);
    $json = json_decode($json_data);

    $sem_ary = array();
    foreach($json as $data){
        $new_sem = $data->semester;
        if($new_sem != $old_sem){
            $day_count = 0;
            $today = $data->hours->value;
            $num_day_of_week = date('N',strtotime($today));
            if($num_day_of_week != 1){
                $days_til_next_monday = 8-$num_day_of_week;
                $start_today = date('Y-m-j', strtotime($today . '+ '.$days_til_next_monday.' days'));
            } else{
                $start_today = date('Y-m-j', strtotime($today));
            }
        }
        $old_sem = $new_sem;

        $monday_u = strtotime(date('Y-m-j',strtotime($data->hours->value)));

        if($monday_u >= strtotime($start_today) && $day_count < 7){
            $sem_ary[$data->semester][$day_count]['open_hours'] = $data->open_hours;
            $first_day = $data->days_open[0];
            $last_day = $data->days_open[count($data->days_open)-1];
            $sem_ary[$data->semester][$day_count]['day_range'] = ($first_day != $last_day) ? hours_sanitize_weekdays($first_day.'-'.$last_day) : hours_sanitize_weekdays($first_day);
            $sem_ary[$data->semester][$day_count]['semester_dates'] = date('M j',strtotime($data->semester_start)).'-'.date('M j',strtotime($data->semester_end));
            $day_count++;
        }
    }

    // remove dupes in array
    $new_ary = array();
    foreach($sem_ary as $key=>$day){
        $new_ary[$key] = array_values(array_unique($day, SORT_REGULAR));
    }
    return $new_ary;
}








function hours_sanitize_weekdays($days){
    switch ($days) {
        case 'MO':
            return 'Monday';
            break;
        case 'TU':
            return 'Tuesday';
            break;
        case 'WE':
            return 'Wednesday';
            break;
        case 'TH`':
            return 'Thursday';
            break;
        case 'FR':
            return 'Friday';
            break;
        case 'SA':
            return 'Saturday';
            break;
        case 'SU':
            return 'Sunday';
            break;
        case 'MO-TH':
            return 'Mon-Thu';
            break;
        case 'MO-FR':
            return 'Mon-Fri';
            break;
        case 'SU-SA':
            return 'Sat-Sun';
            break;
        case 'MO-SU':
            return 'Mon-Sun';
            break;
        case 'MO-SA':
            return 'Mon-Sat';
            break;
        case 'MO-TU':
            return 'Mon-Tue';
            break;
        case 'TU-WE':
            return 'Tue-Wed';
            break;
        case 'TU-TH':
            return 'Tue-Thu';
            break;
        case 'WE-TH':
            return 'Wed-Thu';
            break;
        case 'TH-FR':
            return 'Thu-Fri';
            break;
        case 'FR-SA':
            return 'Fri-Sat';
            break;
        case 'SA-SU':
            return 'Sat-Sun';
            break;
        case 'SU-FR':
            return 'Sun-Fri';
            break;
        case 'TU-FR':
            return 'Tue-Fri';
            break;
        case 'FR-SU':
            return 'Fri-Sun';
            break;
        default:
            return $day;
    }
}




/**
* Returns day of the week in a custom format.
* Used in 'views-view--library-hours-exceptions--block.tpl.php' and 'views-view--library-schedule--block.tpl.php'
*/
function hours_returnWeekDay($day){
    switch ($day) {
        case 'Monday':
            return 'Monday';
            break;
        case 'Tuesday':
            return 'Tuesday';
            break;
        case 'Wednesday':
            return 'Wednesday';
            break;
        case 'Thursday':
            return 'Thursday';
            break;
        case 'Friday':
            return 'Friday';
            break;
        case 'Saturday':
            return 'Saturday';
            break;
        case 'Sunday':
            return 'Sunday';
            break;
        case 'Monday-Thursday':
            return 'Mon-Thu';
            break;
        case 'Monday-Friday':
            return 'Mon-Fri';
            break;
        case 'Sunday-Saturday':
            return 'Sat-Sun';
            break;
        case 'Monday-Sunday':
            return 'Mon-Sun';
            break;
        case 'Monday-Saturday':
            return 'Mon-Sat';
            break;
        case 'Monday-Tuesday':
            return 'Mon-Tue';
            break;
        case 'Tuesday-Wednesday':
            return 'Tue-Wed';
            break;
        case 'Tuesday-Thursday':
            return 'Tue-Thu';
            break;
        case 'Wednesday-Thursday':
            return 'Wed-Thu';
            break;
        case 'Thursday-Friday':
            return 'Thu-Fri';
            break;
        case 'Friday-Saturday':
            return 'Fri-Sat';
            break;
        case 'Saturday-Sunday':
            return 'Sat-Sun';
            break;
        case 'Sunday-Friday':
            return 'Sun-Fri';
            break;
        case 'Tuesday-Friday':
            return 'Tue-Fri';
            break;
        case 'Friday-Sunday':
            return 'Fri-Sun';
            break;
        default:
            return $day;
    }
}

function hours_return_week_days($day){
    switch ($day) {
        case 'MO':
            return 'Monday';
            break;
        case 'TU':
            return 'Tuesday';
            break;
        case 'WE':
            return 'Wednesday';
            break;
        case 'TH':
            return 'Thursday';
            break;
        case 'FR':
            return 'Friday';
            break;
        case 'SU':
            return 'Sunday';
            break;
        case 'SA':
            return 'Saturday';
            break;
        case 'MO-TH':
            return 'Mon-Thu';
            break;
        case 'MO-FR':
            return 'Mon-Fri';
            break;
        case 'SU-SA':
            return 'Sat-Sun';
            break;
        case 'MO-SU':
            return 'Mon-Sun';
            break;
        case 'MO-SA':
            return 'Mon-Sat';
            break;
        case 'MO-TU':
            return 'Mon-Tue';
            break;
        case 'TU-WE':
            return 'Tue-Wed';
            break;
        case 'TU-TH':
            return 'Tue-Thu';
            break;
        case 'WE-TH':
            return 'Wed-Thu';
            break;
        case 'TH-FR':
            return 'Thu-Fri';
            break;
        case 'FR-SA':
            return 'Fri-Sat';
            break;
        case 'SA-SU':
            return 'Sat-Sun';
            break;
        case 'SU-FR':
            return 'Sun-Fri';
            break;
        case 'TU-FR':
            return 'Tue-Fri';
            break;
    }
}



/**
* Helper function that returns node based on field value
* */
function hours_get_node_by_field_value($type, $field, $val){
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $type)
    ->propertyCondition('status', 1)
    ->fieldCondition($field, 'value', $val, '=');

    $result = $query->execute();
    if (isset($result['node'])) {
        $item_nids = array_keys($result['node']);
        $items = entity_load('node', $item_nids);
        foreach($items as $item){
            return $item;
        }
    } else{
        return false;
    }
}






function segment($num){
    $seg = arg();
    return $seg[$num];
}





function hours_init() {
    if (arg(0) == 'node') {
        $path = drupal_get_path('module', 'hours');
        // drupal_add_js($path . '/jquery.js');
        drupal_add_js($path . '/hours_admin.js');
    }
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Modifications to the Library Hours content type form.
 */
function hours_form_library_hours_node_form_alter(&$form, &$form_state, $form_id) {

    if (!empty($form_state['values']['title'])) {
        $form['title'] = array(
            '#type' => 'textfield',
            '#title' => 'Title',
            '#wrapper' => 'edit-title2',
            '#id' => 'edit-title',
            '#name' => 'title',
            '#required' => TRUE,
            '#description' => 'No need to edit this tite. It will auto populate.'
        );
    }

    $form['field_library']['und']['#ajax'] =
    $form['field_service']['und']['#ajax'] =
    $form['field_hours_semester']['und']['#ajax'] = array(
        'callback' => 'ajax_form_library_hours_title_callback',
        'wrapper' => 'edit-title'
    );
}




function hours_get_realtime_ary(){
    $service_ary = array(
        array(
            'library'=>22493,
            'services'=>array(
                'Creamery'=>22486 ,
                'Hill of Beans'=>22487 ,
                'special collections'=>22490
            )
        ),
        array(
            'library'=>22494,
            'services'=>array(
                'makerspace'=>22488 ,
                'Common Grounds Cafe'=>22489
            )
        ),
        array(
            'library'=>22495
        ),
        array(
            'library'=>22496
        ),
        array(
            'library'=>22497
        )
    );

    return $service_ary;

}

function ajax_form_library_hours_title_callback($form, $form_state){

    // build node title based on library/service/semester/year/days/exceptions
    if($form['field_library']['und']['#value'] != '_none'){
        $lib_nid = $form['field_library']['und']['#value'];
        $lib_node = node_load($lib_nid);
        // $lib_node = field_get_items('node', node_load($lib_nid), 'title');
        $lib_short_name = $lib_node->title; //trim(ucfirst($lib_node[0]['value']));
    }

    if($form['field_service']['und']['#value'] != '_none'){
        $srv_nid = $form['field_service']['und']['#value'];
        $srv_node = field_get_items('node', node_load($srv_nid), 'field_short_name');
        $srv_short_name = ucfirst($srv_node[0]['value']);
    }

    if($form['field_hours_semester']['und']['#value'] != '_none'){
        $sem_nid = $form['field_hours_semester']['und']['#value'];
        $sem_node = field_get_items('node', node_load($sem_nid), 'title');
        $sem_title = node_load($sem_nid)->title;
    }

    $form['title'] = array(
        '#type' => 'textfield',
        '#value' => $lib_short_name.' - '.$srv_short_name.' - '.$sem_title.' '.$close_msg.$msg,
        '#wrapper' => 'edit-title2',
        '#id' => 'edit-title',
        '#name' => 'title',
        '#required' => TRUE,
        // '#description' => 'No need to edit this tite. It will auto populate.'
    );

    return $form['title'];
}

