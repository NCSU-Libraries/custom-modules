<?php
/**
* Library Hours Module
* Erik Olson - 7/11/13
*/


/**
* @file
* Overrides 'Page Not Found' message for custom non-drupal URL's.
*/
/**
* Implements hook_menu().
*/
function hours_menu() {
    $items = array();

    $items['hours/%/%'] = array(
        'title' => 'Libraries & Hours',
        'description' => 'Library hours description',
        'page callback' => 'diversion_callback',
        'access arguments' => array('access content'),
        );
    return $items;
}

function diversion_callback(){
    return '';
}



/*
* Returns a cached version of json feed for all libraries to prevent multiple requests
*/
function hours_get_libraries($reset = FALSE) {
    static $my_libraries;
    if (!isset($my_libraries) || $reset) {
        if (!$reset && ($cache = cache_get('hours_get_libraries')) && !empty($cache->data)) {
            $my_libraries = unserialize($cache->data);
        }
        else {
            $library_json = file_get_contents($GLOBALS['base_url'].'/rest_libraries/views/Libraries.json');
            $my_libraries = json_decode($library_json);
            cache_set('hours_get_libraries', serialize($my_libraries), 'cache');
        }
    }
    return $my_libraries;
}


/*
* Returns a cached version of json feed to prevent multiple requests
*/
function hours_get_current_semester_json($reset = FALSE) {
    static $hours_current_semester_json;
    if (!isset($hours_current_semester_json) || $reset) {
        if (!$reset && ($cache = cache_get('hours_current_semester_json')) && !empty($cache->data)) {
            $hours_current_semester_json = unserialize($cache->data);
        }
        else {
            $hours_current_semester_json = file_get_contents($GLOBALS['base_url'].'/rest-semester/views/current_semester.json');
            cache_set('hours_current_semester_json', serialize($hours_current_semester_json), 'cache');
        }
    }
    return $hours_current_semester_json;
}


/*
* Returns a cached version of json feed to prevent multiple requests
*/
function hours_get_real_time_json($reset = FALSE) {
    static $hours_real_time_json;
    if (!isset($hours_real_time_json) || $reset) {
        if (!$reset && ($cache = cache_get('hours_real_time_json')) && !empty($cache->data)) {
            $hours_real_time_json = unserialize($cache->data);
        }
        else {
            $real_time_json = file_get_contents($GLOBALS['base_url'].'/rest_hours/real-time.json');
            $hours_real_time_json = json_decode($real_time_json);
            cache_set('hours_real_time_json', serialize($hours_real_time_json), 'cache',60*60);
        }
    }
    return $hours_real_time_json;
}

/*
* Returns current semestes data for this month
* Return nid and semester name
*/
function hours_get_current_semesters(){
    $raw_json = hours_get_current_semester_json();
    $raw_json2 = hours_get_current_semester_json();
    $json = json_decode($raw_json);
    $all_semester_ary = array();
    foreach ($json as $key => $val) {
        $start_sem_date = strtotime($val->start_date);
        $end_sem_date = strtotime($val->end_date);
        $date = (isset($_GET['date'])) ? strtotime($_GET['date']) : date('U');

        // if semester date falls into current date
        if($date < $end_sem_date &&
            $date > $start_sem_date ||
            date('Y-m',$date) == date('Y-m',$start_sem_date) ||
            date('Y-m',$date) == date('Y-m',$end_sem_date)
        ){
            array_push($all_semester_ary, array('nid'=>$val->nid,'semester'=>$val->semester));
        }
    }

    return $all_semester_ary;
}


/*
Gives a weight value (0-6) based on rule. Monday is 0 and sunday is 6
 */
function hours_sort_by_rule($rule,$start){
    $raw_rule = preg_split('/BYDAY=/', $rule);
    if(count($raw_rule) > 1){
        $raw_rule = preg_split('/;/', $raw_rule[1]);
        $new_rule = preg_split('/,/', $raw_rule[0]);
        $first_day = array_shift(array_values($new_rule));
    } else{
        $first_day = $start;
    }

    switch ($first_day) {
        case 'MO':
            return 1;
            break;
        case 'TU':
            return 2;
            break;
        case 'WE':
            return 3;
            break;
        case 'TH':
            return 4;
            break;
        case 'FR':
            return 5;
            break;
        case 'SA':
            return 6;
            break;
        case 'SU':
            return 7;
            break;
        default:
            return $start;
            break;
    }
}
function not_empty($var){
    if($var != -1){
        return $var;
    }
}


/**
* Returns JSON data for all semesters
*/
function hours_get_semester_json($all_semester_ary){
    // get relevant semester(s)
    // $all_semester_ary = hours_get_current_semesters();

    // form json url from url segments
    $lib_node = hours_get_node_by_field_value('library', 'field_library_short_name', segment(1));
    $srv_node = hours_get_node_by_field_value('services', 'field_short_name', segment(2));
    $srv_exceptions = field_get_items('node', node_load($srv_node->nid), 'field_exceptions');

    // get all hours data from json
    $json_data = array();
    foreach($all_semester_ary as $key => $sem){
        $json = file_get_contents('http://lib.ncsu.edu/rest_hours/library-hours-schedule.json?library='.$lib_node->nid.'&service='.$srv_node->nid.'&semester='.$sem['nid']);
        $json_decoded = json_decode($json);
        if(count($json_decoded) > 0){
            $json_data[$key] = $json_decoded;
        }
    }
    // sort all entries by start date
    $num = 0;
    $new_ary = array();
    foreach($json_data as $date_key => $data){
        foreach($data as $sort_key =>$sort_ary){
            $weight = hours_sort_by_rule($sort_ary->hours[0]->rrule,$sort_ary->open);
            $new_ary[$date_key][$weight] = $json_data[$date_key][$sort_key];
        }
        ksort($new_ary[$date_key],SORT_NUMERIC);
    }
    $json_data = $new_ary;

    return $json_data;
}

/**
* Returns day of the week in a custom format.
* Used in 'views-view--library-hours-exceptions--block.tpl.php' and 'views-view--library-schedule--block.tpl.php'
*/
function hours_returnWeekDay($day){
    switch ($day) {
        case 'Friday':
            return 'Friday';
            break;
        case 'Sunday':
            return 'Sunday';
            break;
        case 'Saturday':
            return 'Saturday';
            break;
        case 'Monday-Thursday':
            return 'Mon-Thu';
            break;
        case 'Monday-Friday':
            return 'Mon-Fri';
            break;
        case 'Sunday-Saturday':
            return 'Sat-Sun';
            break;
        case 'Monday-Sunday':
            return 'Mon-Sun';
            break;
    }
}
function hours_return_week_days($day){
    switch ($day) {
        case 'FR':
            return 'Friday';
            break;
        case 'SU':
            return 'Sunday';
            break;
        case 'SA':
            return 'Saturday';
            break;
        case 'MO-TH':
            return 'Mon-Thu';
            break;
        case 'MO-FR':
            return 'Mon-Fri';
            break;
        case 'SU-SA':
            return 'Sat-Sun';
            break;
        case 'MO-SU':
            return 'Mon-Sun';
            break;
    }
}


/**
* Return available hours for particular library/space/semester/year
*/
function hours_get_library_hours_status($library, $service, $json){
    foreach ($json as $key => $item) {
        // is it the correct library and service
        if($item->library == $library && $item->service == $service){
            // is it the correct date
            $open = strip_tags($item->open[0]);
            $close = strip_tags($item->close[0]);
            $now = date('U');
            if(date('z',$now) == date('z',$open)){
                if($item->appointment_only == 1){
                    return array('status' => '', 'msg' => 'By Appointment Only', 'class' => 'appointment');
                } else if($item->twenty_four_hours == 1){
                    return array('status' => 'open', 'msg' => '24 Hours', 'class' => 'open');
                } else if($open < $now && $close > $now){ // if it's open now
                    return array('status' => 'open', 'msg' => 'until '.date('g:ia',$close), 'class' => 'open');
                } else if($open > $now){ //else if its open today just not open yet
                    return array('status' => 'closed', 'msg' => 'opens at '.date('g:ia',$open), 'class' => 'closed');
                } else{ //else when it closed
                    return array('status' => 'closed', 'msg' => 'at '.date('g:ia',$close), 'class' => 'closed');
                }
            }
        }
    }
}

/**
* Helper function that returns node based on field value
* */
function hours_get_node_by_field_value($type, $field, $val){
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $type)
    ->propertyCondition('status', 1)
    ->fieldCondition($field, 'value', $val, '=');

    $result = $query->execute();
    if (isset($result['node'])) {
        $item_nids = array_keys($result['node']);
        $items = entity_load('node', $item_nids);
        foreach($items as $item){
            return $item;
        }
    } else{
        return false;
    }
}






/**
* Helper function that returns field a based on the value of a field in same node
* */
function hours_get_tax_id($name){
    $query = new EntityFieldQuery;
    $result =  $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('name', $name)
      ->execute();
    if($result['taxonomy_term']){
        return array_shift($result['taxonomy_term'])->tid;
    }

}







function hours_preprocess_calendar_month(&$vars) {
    $view = $vars['view'];
    $rows = $vars['rows'];

    $excep_ary = array();
    foreach ($view as $key => $item) {
        if($key == 'result'){
            foreach($item as $data){
                if(isset($data->field_data_field_hours_field_hours_value)){
                    $start = $data->field_data_field_hours_field_hours_value;
                } else{
                    $start = '';
                }
                if(isset($data->field_data_field_hours_field_hours_value2)){
                    $end = $data->field_data_field_hours_field_hours_value2;
                } else{
                    $end = '';
                }
                $exception = field_get_items('node', node_load($data->nid), 'field_exception');
                $exception = $exception[0]['value'];
                array_push($excep_ary, array('start'=>$start, 'end'=>$end, 'exception'=>$exception));
            }
        }
    }
    if (empty($rows)) {
        $rows = array();
        $day_names = array();
    }
    elseif (sizeof($rows) > 1) {
        $day_names = array_shift($rows);
    }
    else {
        $day_names = $rows;
        $rows = array();
    }

    $month_rows = $rows;
    $num = 0;
    foreach ($rows as $weekno => $row) {
        foreach ($row as $day => $data) {
            $num++;

            $cell = $data['data'];
            // If this cell is already rendered, like the weekno column,
            // move to the next item.
            if (!is_array($cell)) {
                $month_rows[$weekno][$day]['data'] = $cell;
                continue;
            }
            $data = $cell['datebox'];
            if ($cell['empty']) {
                $data .= $cell['empty'];
            }
            else {
                $data .= implode($cell['all_day']);
                foreach ($cell['items'] as $hour => $item) {
                    $data .= implode($item);
                }
                $data .= $cell['link'];
            }
            if ($view->date_info->mini) {
                $month_rows[$weekno][$day]['data'] = $data;
            }
            else {
                $month_rows[$weekno][$day]['data'] = '<div class="inner">' . $data . '</div>';
            }
        }
    }

    $vars['display_type'] = $view->date_info->granularity;
    $vars['min_date_formatted'] = date_format($view->date_info->min_date, DATE_FORMAT_DATETIME);
    $vars['max_date_formatted'] = date_format($view->date_info->max_date, DATE_FORMAT_DATETIME);
}

/**
* Display a mini month view.
*/
function hours_preprocess_calendar_mini(&$vars) {
    // Add in all the $vars added by the main calendar preprocessor.
    hours_preprocess_calendar_month($vars);

    $view = $vars['view'];

    // Make sure that the calendar title links go to the month view,
    // not the year view (if this is embedded in a year display).
    $view->override_path =  calendar_granularity_path($view, 'month');

    $view->date_info->show_title = !empty($view->date_info->show_title) ? $view->date_info->show_title : FALSE;
    $vars['show_title'] = $view->date_info->show_title;
    $vars['view'] = $view;
}

/**
* Helper function that returns node based on multiple field values
* */
function hours_get_semester_nid($semester, $year){
    $semester_json = file_get_contents($GLOBALS['base_url'].'/rest-semester/views/current_semester.json?semester='.$semester.'&year='.$year);
    $semester_obj = json_decode($semester_json);
    return $semester_obj[0]->nid;
}


function hours_get_semester_name($nid){

    $semester_url = file_get_contents($GLOBALS['base_url'].'/rest-semester/views/current_semester.json');
    $semester_json = json_decode($semester_url);

    foreach ($semester_json as $key => $sem) {
        if($sem->nid == $nid){
            return $sem->semester;
        }
    }
}

function hours_get_all_exceptions(){
    $lib_node = hours_get_node_by_field_value('library','field_library_short_name',segment(1));
    $srv_node = hours_get_node_by_field_value('services','field_short_name',segment(2));
    $semester_ary = hours_get_current_semesters();
    $json_ary = array();
    foreach ($semester_ary as $key => $sem) {
        $exceptions_json = file_get_contents($GLOBALS['base_url'].'/rest_hours/library-hours.json?library='.$lib_node->nid.'&service='.$srv_node->nid.'&semester='.$sem['nid']);
        $json_ary[$key] = json_decode($exceptions_json);
        foreach($json_ary[$key] as $yet_another_key => $yet_another_nested_loop){
            $json_ary[$key][$yet_another_key]->semester_term = strtolower($sem['semester']);
        }
    }

    return $json_ary;
}

function hours_is_exception($date,$json){
    if($json){ //if json exists
        foreach ($json as $sems) {
            foreach ($sems as $dates) { //for each semester
                $sem_name = strtolower($dates->semester_term);

                foreach($dates->open as $key => $time){ //loop through month

                    $new_time = date('Y-m-d',strip_tags($time));
                    if($date == $new_time){ //if date matches this day on calendar
                        $open_time = date('g:ia',strip_tags($dates->open[$key]));
                        $close_time = date('g:ia',strip_tags($dates->close[$key])); //if close time is past midnight
                        $raw_close = (date('G',$raw_closed) > 0 && date('G',$raw_closed) < 5) ? $raw_close-86400 : $raw_close;
                        $date = date('M j, Y',strip_tags($dates->open[$key]));
                        $twenty_four_hours = ($dates->twenty_four_hours == 1) ? 'twenty_four_hours' : '';
                        $closed = ($dates->closed) ? 'closed' : '';
                        $exception = ($dates->exception == 'Yes') ? 'exception' : '';
                        $exam_hours = ($dates->exam_hours == 1) ? 'exam-hours' : '';
                        $class_string = $sem_name . ' ' . $closed . ' ' . $exception . ' ' . $exam_hours . ' ' . $closed . ' ' . $twenty_four_hours;
                        return array('open'=>$open_time, 'close'=>$close_time, 'date'=>$date, 'classes'=>$class_string);
                    }
                }
            }
        }
    }
}





function segment($num){
    $seg = arg();
    return $seg[$num];
}






function hours_init() {
    if (arg(0) == 'node') {
        $path = drupal_get_path('module', 'hours');
        // drupal_add_js($path . '/jquery.js');
        drupal_add_js($path . '/hours_admin.js');
    }
}

/**
 * Implements hook_form_FORM_ID_alter()
 *
 * Modifications to the Library Hours content type form.
 */
function hours_form_library_hours_node_form_alter(&$form, &$form_state, $form_id) {

    if (!empty($form_state['values']['title'])) {
        $form['title'] = array(
            '#type' => 'textfield',
            '#title' => 'Title',
            '#wrapper' => 'edit-title2',
            '#id' => 'edit-title',
            '#name' => 'title',
            '#required' => TRUE,
            '#description' => 'No need to edit this tite. It will auto populate.'
        );
    }

    $form['field_library']['und']['#ajax'] =
    $form['field_service']['und']['#ajax'] =
    $form['field_hours_semester']['und']['#ajax'] = array(
        'callback' => 'ajax_form_library_hours_title_callback',
        'wrapper' => 'edit-title'
    );
}

function ajax_form_library_hours_title_callback($form, $form_state){

    // build node title based on library/service/semester/year/days/exceptions
    if($form['field_library']['und']['#value'] != '_none'){
        $lib_nid = $form['field_library']['und']['#value'];
        $lib_node = field_get_items('node', node_load($lib_nid), 'field_library_short_name');
        $lib_short_name = trim(ucfirst($lib_node[0]['value']));
    }

    if($form['field_service']['und']['#value'] != '_none'){
        $srv_nid = $form['field_service']['und']['#value'];
        $srv_node = field_get_items('node', node_load($srv_nid), 'field_short_name');
        $srv_short_name = ucfirst($srv_node[0]['value']);
    }

    if($form['field_hours_semester']['und']['#value'] != '_none'){
        $sem_nid = $form['field_hours_semester']['und']['#value'];
        $sem_node = field_get_items('node', node_load($sem_nid), 'title');
        $sem_title = node_load($sem_nid)->title;
    }

    $form['title'] = array(
        '#type' => 'textfield',
        '#value' => $lib_short_name.' '.$srv_short_name.' '.$sem_title.' '.$close_msg.$msg,
        '#wrapper' => 'edit-title2',
        '#id' => 'edit-title',
        '#name' => 'title',
        '#required' => TRUE,
        // '#description' => 'No need to edit this tite. It will auto populate.'
    );

    return $form['title'];
}
