<?php
/**
 * Implements hook_services_request_postprocess_alter()
 *
 */

function services_modify_services_request_postprocess_alter($controller, $args, &$result){

  // Is this a "services_1" display?  (look in Views)
  if ($args) {
    $services_1_id = $args[0]['display_id'] == 'services_1' ? TRUE : FALSE;
    // The View's machine name
    $view_name = $args[0]['view_name'];
  }

  if ($services_1_id){
    switch ($view_name) {
      // Partners view
      case 'web_services':
        // Altering the output of the partners service
        foreach ($result as $key => $value) {
          if ($value->image){
            $uri = $value->image['uri'];
            $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
            $path = $wrapper->getExternalUrl();
            $value->image['real_uri'] = $path;
          }
        }
        break;

      // Altering Spaces' web service output
      case 'web_services_spaces':
        // Altering the output of the rest_node service
        $res_url_base = '//www.lib.ncsu.edu/roomreservations/schedule.php?date=';
        $today = date('m-d-Y');  // needed for reservation system links

        foreach ($result as $key => $value) {
          // Adding full path to space
          $value->path = '//www.lib.ncsu.edu/'. drupal_get_path_alias('node/'. $value->nid);
          // Repeating myself @todo
          // Image URL finding, and decluttering
          if ($value->image){
            $uri = $value->image['uri'];
            $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
            $path = $wrapper->getExternalUrl();
            $value->image_url = $path;
            $value->image_alt = $value->image['alt'];
            $value->image_title = $value->image['title'];
          }
          // Removing the other junk
          unset($value->image);

          // Add reservation link
          if ($value->res_id) {
            $value->res_link = $res_url_base . $today .'&scheduleid='. $value->res_id;
          }
          unset($value->res_id);
          if ($value->reservation_method == 'By Mediated Email Form'){
            $value->res_link = '//www.lib.ncsu.edu/huntlibrary/roomrequest';
          }
          unset($value->reservation_method);
        }
        break;
    }
  }

  // Altering Reports' web service output
  // See /rest-nodes/reports
  if ($view_name == "web_services_spaces" && $args[0]['display_id'] == 'services_2') {
    foreach ($result as $key => $report) {
      $report->project_link = substr($report->project_link, 5);
      $report->report_link = '//www.lib.ncsu.edu/'. drupal_get_path_alias('node/'. $report->report_link);
      log_to_file($report->project_link);
    }
  }

  // Altering output of event service
  if ($view_name == 'web_services_calendar') {
    foreach ($result as $key => $value) {

      // Repeating myself @todo
      // Image URL finding, and decluttering
      if ($value->image_event){
        $uri = $value->image_event['uri'];
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        $path = $wrapper->getExternalUrl();
        $value->event_image['url'] = $path;
        $value->event_image['alt'] = $value->image_event['alt'];
        $value->event_image['title'] = $value->image_event['title'];
      }
      unset($value->image_event);

      // Repeating myself @todo
      // Image URL finding, and decluttering
      if ($value->image_space){
        $uri = $value->image_space['uri'];
        $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
        $path = $wrapper->getExternalUrl();
        $value->space_image['url'] = $path;
        $value->space_image['alt'] = $value->image_space['alt'];
        $value->space_image['title'] = $value->image_space['title'];
      }
      unset($value->image_space);

      // Start and end time formatting
      if ($value->when){
        $value->time['start'] = date('U', strtotime($value->when[0]['value']));
        $value->time['end'] = date('U', strtotime($value->when[0]['value2']));
      }
      unset($value->when);

    }
  }

















  // *********
  // ALTER HOURS OUTPUT NEW!!!
  // *********

    if($args[0]['display_id'] == 'master_feed'){
        $dup = false;$suspect = false;$num = 0;$date_found = true;
        $day_num = date('j',strtotime($the_date))+0;
        foreach ($result as $key => $value) {
            $value->hours = $value->hours[0];
            $value->exception = $value->exception['value'];
            if($value->exception == '0' && $value->exam_hours == '0'){
              $value->type = 'regular';
            } else{
              $value->type = 'exception';
            }

            // if i have exception it has to have a regular so weed out the regular hours in favor of an exception for that day
            $today = date('Y-n-j',strtotime($value->hours['value']));
            if($value->type == 'exception'){
              $previous_day = date('Y-n-j',strtotime($result[$key-1]->hours['value']));
              $next_day = date('Y-n-j',strtotime($result[$key+1]->hours[0]['value']));
              if($previous_day == $today){
                unset($result[$key-1]);
                $raw_open_tz_tomorrow = strtotime($result[$key+1]->hours[0]['value']) + ncsulib_foundation_adjust_for_timezone($result[$key+1]->hours[0]['value']);
              } else{
                unset($result[$key+1]);
                $raw_open_tz_tomorrow = strtotime($result[$key+2]->hours[0]['value']) + ncsulib_foundation_adjust_for_timezone($result[$key+2]->hours[0]['value']);
              }
            }


            // U time adjusted from timezone
            $raw_open_tz = strtotime($value->hours['value']) + ncsulib_foundation_adjust_for_timezone($value->hours['value']);
            $raw_close_tz = strtotime($value->hours['value2']) + ncsulib_foundation_adjust_for_timezone($value->hours['value']);
            $open = date('g:ia',$raw_open_tz);
            $close = date('g:ia',$raw_close_tz);

            // build hours display string
            if($value->twenty_four_hours == 1){
                $value->display = '24 hours';
                $value->open_hours = $value->display;
            } else if($value->closed == 1){
                $value->display = 'closed';
                $value->open_hours = $value->display;
            } else if($value->appointment_only == 1){
                $value->display = 'by appointment only';
                $value->open_hours = $value->display;
            } else if($open == '12:00am'){
                $open_str = ($open == '12:00am') ? 'midnight' : $open;
                $open_str = ($open == '12:00pm') ? 'noon' : $open_str;
                $close_str = ($close == '12:00am') ? 'midnight' : $close;
                $close_str = ($close == '12:00pm') ? 'noon' : $close_str;
                $value->display = 'closes at '.$close_str;
                $value->open_hours = $value->display;
            } else{
                $open_str = ($open == '12:00am') ? 'midnight' : $open;
                $open_str = ($open == '12:00pm') ? 'noon' : $open_str;
                $close_str = ($close == '12:00am') ? 'midnight' : $close;
                $close_str = ($close == '12:00pm') ? 'noon' : $close_str;
                if($value->midnight == 0 && $close == '12:00am'){
                    $open_str = 'opens at '.$open_str;
                    $overnight = 1;
                    $value->display = $open_str;
                    $value->open_hours = $open_str;
                } else{
                  $value->display = $open_str.' - '.$close_str;
                  $value->open_hours = $open_str.' - '.$close_str;
                }
            }


            // is it open right now?
            $time_open_today = date("M d g:ia", mktime(date('G',$raw_open_tz), date('i',$raw_open_tz), 0, date('n'), date('j'), date('Y')));
            $time_open_today_U = strtotime(date("M d g:ia", mktime(date('G',$raw_open_tz), date('i',$raw_open_tz), 0, date('n'), date('j'), date('Y'))));
            $day_close = (date('g', $raw_close_tz) < 4 || (date('g', $raw_close_tz) == 12 && $value->midnight == 1)) ? date('j')+1 : date('j'); //if close is 4am or less
            $time_close_today = date("M d g:ia", mktime(date('G',$raw_close_tz), date('i',$raw_close_tz), 0, date('n'), $day_close, date('Y')));
            $time_close_today_U = strtotime(date("M d g:ia", mktime(date('G',$raw_close_tz), date('i',$raw_close_tz), 0, date('n'), $day_close, date('Y'))));
            // $value->time_range = $time_open_today . ' - ' . $time_close_today;

            if($value->closed == 1){
                $value->is_open = 0;
            } else if($value->twenty_four_hours == 1){
                $value->is_open = 1;
            } else if($value->midnight == 0 && $close == '12:00am'){ //overnight
                $value->is_open = 1;
            } else if($time_open_today_U < date('U') && $time_close_today_U > date('U')){
                $value->is_open = 1;
            } else{
                $value->is_open = 0;
            }

            if($value->is_open == 1){
                $value->open_display = 'open';
            } else{
                $value->open_display = 'closed';
            }

            // real time display
            if($value->twenty_four_hours == 1){
              $value->real_time_display = '24 Hours';
            } else if($value->is_open == 1){
              if($value->midnight == 0 && $close_str == 'midnight'){
                $value->real_time_display = 'overnight';
              } else{
                $value->real_time_display = 'closes at '.$close_str;
              }
            } else if($value->appointment_only == 1){
              $value->real_time_display = 'by appointment only';
            } else if($value->closed == '1'){
              $value->real_time_display = 'today';
            } else if($value->open_display == 'closed'){
              $now = date('U');
              // if not open yet
              if($now < $time_open_today_U){
                $value->real_time_display = 'opens at '.$open_str;
              } else if($now > $time_close_today_U){
                $value->real_time_display = 'at '.$close_str;
                // $value->real_time_display = 'Opens tomorrow at '.date('g:ia',$raw_open_tz_tomorrow);
              }
            }

            // semester string
            $semester_str = preg_split('/ /si',$value->semester);
            $value->semester = strtolower($semester_str[0]);

            // repeat rule
            $rule = preg_split('/;/si',$value->hours['rrule']);
            $all_days = preg_split('/=/si',$rule[2]);
            if($value->exception == 1 || $value->exam_hours == 1){ //if exception get closing date
              $end_date = preg_split('/,/si',$all_days[1]);
              $end_day = preg_split('/T/si',$end_date[0]);
              $end_time = preg_split('/T/si',$end_day[1]);
              $end_year = substr($end_day[0], 0, 4);
              $end_mo = substr($end_day[0], 4, 2);
              $end_day = substr($end_day[0], 6, 2);
              $begin = date('M j',$raw_open_tz);
              $end = date('j',strtotime($end_year.'-'.$end_mo.'-'.$end_day)-86400);
              $value->day_start = $raw_open_tz;
              if($end_year){
                $value->day_end = strtotime($end_year.'-'.$end_mo.'-'.$end_day)-86400;
              } else{
                $value->day_end = $raw_open_tz;
              }
            } else{
              $value->days_open = preg_split('/,/si',$all_days[1]);
            }

            // semester dates
            $value->semester_start = $value->semester_dates['value'];
            $value->semester_end = $value->semester_dates['value2'];


            // cleanup
            unset($value->hours['db']);
            unset($value->semester_dates);
            unset($value->library);
            unset($value->service);

        }

      $result = array_values($result);
    }
}





/**
 * ADX response formatter
 *
 * Not in use as of 8/2/2013
 */
function services_modify_rest_server_response_formatters_alter(&$formatters) {
  $formatters['adx'] = array(
    'mime types' => array('application/xml', 'text/xml'),
    'view' => 'RESTServerViewExtra',
    'view arguments' => array('format' => 'adx'),
  );

}
